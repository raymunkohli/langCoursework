options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

SKIP : 
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < EXTENDS : "extends">
| < RETURN: "return">
| < ARRAYOF: "arrayof">
| < BOOLEAN: "boolean">
| < INT: "int">
| < IF: "if">
| < THEN: "then">
| < ELSE: "else">
| < WHILE: "while">
| < DO: "do">
| < OUTPUT: "output">
| < LENGTH: "length">
| < TRUE: "true">
| < FALSE: "false">
| < SELF: "self">
| < NEW: "new">
| < OBJECT: "object">
| < ISNULL: "isnull"> 
| <OPENCBR : "{">
| <CLOSECBR : "}">
| <OPENB :"(">
| <CLOSEB : ")">
| <COMMA : ",">
| <OPENSBR : "[">
| <CLOSESBR :"]">
| <EXPMARK : "!">
| <FSTOP : ".">
| <SEMI : ";">
| <EQUALS: "=">



| < INTEGER_LITERAL: (["0"-"9"])+ >
| < OP: "and"| "<"| "=="| "div"| "+"| "-"| "*">
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >


}

/*
 * TOKEN tester
 */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <RETURN>
      | t = <EXTENDS>
      | t = <ARRAYOF>
      | t = <BOOLEAN>
      | t = <INT>
      | t = <IF>
      | t = <THEN>
      | t = <ELSE>
      | t = <WHILE>
      | t = <DO>
      | t = <OUTPUT>
      | t = <LENGTH>
      | t = <TRUE>
      | t = <FALSE>
      | t = <SELF>
      | t = <NEW>
      | t = <OBJECT>
      | t = <ISNULL>
      | t = <OPENCBR>
      | t = <CLOSECBR>
      | t = <OPENB>
      | t = <CLOSEB>
      | t = <COMMA>
      | t = <OPENSBR>
      | t = <CLOSESBR>
      | t = <EXPMARK>
      | t = <FSTOP>
      | t = <SEMI>
      )

      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( 
      t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( 
      t = <OP>
      { System.out.println("Recognised as OP: " + t.image); }
    )
  | ( 
      t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
}


/************************************
 * The Moopl grammar starts here *
 ************************************/


public Program nt_Program() :
{
  ProcDecl a;
  List<ProcDecl> b = new LinkedList<ProcDecl>();
  ClassDecl c;
  List<ClassDecl> d = new LinkedList<ClassDecl>();
}
{
  (a=nt_ProcDecl() { b.add(a);})+ (c=nt_ClassDecl(){d.add(c);})*
  {return new Program(b,d);}
}

public ClassDecl nt_ClassDecl() :
{
  Token a,b;
  FieldDecl c;
  List<FieldDecl> e = new LinkedList<FieldDecl>();
  MethodDecl d;
  List<MethodDecl> f = new LinkedList<MethodDecl>();

}
{ 
  
  <CLASS> a=<ID> 
  ((<OPENCBR> (c = nt_FieldDecl() {e.add(c);})* (d = nt_MethodDecl(){f.add(d);})* <CLOSECBR>
  {return new ClassDeclSimple(a.image,e,f);})|
  (<EXTENDS> b =<ID> <OPENCBR> (c=nt_FieldDecl() {e.add(c);})* (d =nt_MethodDecl(){f.add(d);})* <CLOSECBR>
  {return new ClassDeclExtends(a.image,b.image,e,f);}))

  /* example with lookahead
  LOOKAHEAD(2)
  <CLASS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  | 
  <CLASS> <ID><EXTENDS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  */
}

public FieldDecl nt_FieldDecl() :
{
  Type a;
  Token b;
}
{ 
   (a =nt_Type()) b=<ID> <SEMI>
   {return new FieldDecl(a,b.image);}
}


public MethodDecl nt_MethodDecl() :
{
  ProcDecl a;
  FunDecl b;
}
{
    a = nt_ProcDecl() 
    {return a;}
    |b= nt_FunDecl() { return b;}
}


public ProcDecl nt_ProcDecl() :
{
  Token a;
  List<Formal> b = new LinkedList<Formal>();
  Stm c;
  List<Stm> d = new LinkedList<Stm>();

}
{
  <PROC> a =<ID><OPENB> b= nt_FormalList() <CLOSEB><OPENCBR> (c=nt_Statement() {d.add(c);})* <CLOSECBR>  
{return new ProcDecl(a.image,b,d);}
}


public FunDecl nt_FunDecl() :
{
  Type a;
  Token b;
  List<Formal> c = new LinkedList<Formal>();
  Stm d;
  List<Stm> e = new LinkedList<Stm>();
  Exp f;
}

{
  <FUN> a =nt_Type() b =<ID> 
  <OPENB> c=nt_FormalList() <CLOSEB> <OPENCBR> 
  (d = nt_Statement(){e.add(d);})* <RETURN> f =nt_Exp() <SEMI> <CLOSECBR>
  {return new FunDecl(a,b.image,c,e,f);}
}

public List<Formal> nt_FormalList() :
{
  List<Formal> a = new LinkedList<Formal>();
  Type b;
  Token c;
  Formal d,e;
}
{
  (b =nt_Type() c =<ID> {a.add(new Formal(b,c.image));} 
  (d = nt_FormalRest() {a.add(d);})*)?

  {return a;}
}

public Formal nt_FormalRest() :
{
  Type a;
  Token b;
}
{
  <COMMA> a =nt_Type() b=<ID>
  {return new Formal(a,b.image);}
}


public Type nt_Type() :
{
  Type a;
  Token b;
}
{ 
  <ARRAYOF><OPENB>(a =nt_Type())<CLOSEB>
  {return new TypeArray(a);}
  |<BOOLEAN> 
  {return new TypeBoolean();}
  |<INT>
  {return new TypeInt();}
  |b = <ID>
  {return new TypeClassType(b.image);}
}

public Stm nt_Statement():
{
  StmBlock a,b;
  Exp c,h,i;
  Type d;
  Token e;
  Var f;
  List<Exp> g = new LinkedList<Exp>();
}
{
  (a =nt_Block() {return a;}) |
  (<IF> <OPENB> c =nt_Exp() <CLOSEB> <THEN> a =nt_Block() <ELSE> b=nt_Block() 
  {return new StmIf(c,a,b);})|
  (<WHILE> <OPENB> c = nt_Exp() <CLOSEB> <DO> a =nt_Block()
  {return new StmWhile(c,a);})|
  (<OUTPUT> c=nt_Exp() <SEMI>
  {return new StmOutput(c);}|
  LOOKAHEAD(2)
  (d = nt_Type() e=<ID> <SEMI>
  {return new StmVarDecl(d,e.image);}) |
  LOOKAHEAD(2)
  (f =nt_Var() <EQUALS> c =nt_Exp() <SEMI>
  {return new StmAssign(f,c);})|
  LOOKAHEAD(2)
  (c = nt_PrimaryExp() <FSTOP> e=<ID> <OPENB> g =nt_ExpList() <CLOSEB> <SEMI>
  {return new StmCall(c,e.image,g);})|
  LOOKAHEAD(2)
  (c = nt_PrimaryExp() <OPENSBR> h=nt_Exp() <CLOSESBR> <EQUALS> i=nt_Exp() <SEMI> 
  {return new StmArrayAssign(c,h,i);})
  )
    
}

public StmBlock nt_Block() :
{
  Stm a;
  List<Stm> ab = new LinkedList<Stm>();
}
{
  <OPENCBR> (a = nt_Statement() {ab.add(a);})* <CLOSECBR>
  {return new StmBlock(ab);}
}


public Exp nt_Exp() :
{
Exp a,c;
Token b;
List<Exp> e = new LinkedList<Exp>();
}
{
a = nt_PrimaryExp() 
(
  (b= <OP> c= nt_PrimaryExp())
  {
    ExpOp.Op theOp;
    if ("and".equals(b.image)){
      theOp = ExpOp.Op.AND;
    }
    else if ("<".equals(b.image)){
      theOp = ExpOp.Op.LESSTHAN;
    }
    else if ("==".equals(b.image)){
      theOp = ExpOp.Op.EQUALS;
    }
    else if ("div".equals(b.image)){
      theOp = ExpOp.Op.DIV;
    }
    else if ("+".equals(b.image)){
      theOp = ExpOp.Op.PLUS;
    }
    else if ("-".equals(b.image)){
      theOp = ExpOp.Op.MINUS;
    }
    else if ("*".equals(b.image)){
      theOp = ExpOp.Op.TIMES;
    }
    else{
      theOp = null;
    }
    return new ExpOp(a,theOp,c);
  }
  |
  (<OPENSBR> c =nt_Exp() <CLOSESBR>)
  {return new ExpArrayLookup(a,c);}
  |
    (<FSTOP>
      ((<LENGTH>
      {return new ExpArrayLength(a);})
      |
      (b =<ID> <OPENB> e=nt_ExpList() <CLOSEB>
      {return new ExpCall(a,b.image,e);}))
    )
  | {}{return a;}) 

}


public Exp nt_PrimaryExp() :
{
  Token a;
  Var b;
  Type c;
  Exp d;
  List<Exp> e = new LinkedList<Exp>();
}
{
  (a = <INTEGER_LITERAL>)
  {return new ExpInteger(Integer.parseInt(a.image));}|
  (a =<TRUE>)
  {return new ExpTrue();}|
  (<FALSE>)
  {return new ExpFalse();}|
  b =nt_Var()
  {return new ExpVar(b);}|
  (<SELF>)
  {return new ExpSelf();}|
  (<NEW>
    ((<ARRAYOF><OPENB>c = nt_Type()<CLOSEB><OPENSBR>d =nt_Exp()<CLOSESBR>
    {return new ExpNewArray(c,d);})|
    (<OBJECT>a =<ID><OPENB> e =nt_ExpList()<CLOSEB>
    {return new ExpNewObject(a.image,e);})))|
  (<EXPMARK> d =nt_PrimaryExp()
  {return new ExpNot(d);})|
  (<ISNULL> d =nt_PrimaryExp()
  {return new ExpIsnull(d);})|
  (<OPENB> d= nt_Exp() <CLOSEB>
  {return d;})
  
}

public Var nt_Var() :
{
  Token a;
}
{
  a= <ID>
  {return new Var(a.image);}
}

public List<Exp> nt_ExpList() :
{
  Exp b,c;
  List <Exp> a = new LinkedList<Exp>();
}
{
  ((b=nt_Exp() {a.add(b);} (c=nt_ExpRest() {a.add(c);})*)|{})
  {return a;}

}

public Exp nt_ExpRest() :
{
  Exp a;
}
{
  <COMMA> a =nt_Exp()
  {return a;}
}

public void eof() :
{}
{
  <EOF>
}

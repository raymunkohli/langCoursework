options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

SKIP : 
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < EXTENDS : "extends">
| < RETURN: "return">
| < ARRAYOF: "arrayof">
| < BOOLEAN: "boolean">
| < INT: "int">
| < IF: "if">
| < THEN: "then">
| < ELSE: "else">
| < WHILE: "while">
| < DO: "do">
| < OUTPUT: "output">
| < LENGTH: "length">
| < TRUE: "true">
| < FALSE: "false">
| < SELF: "self">
| < NEW: "new">
| < OBJECT: "object">
| < ISNULL: "isnull"> 
| <OPENCBR : "{">
| <CLOSECBR : "}">
| <OPENB :"(">
| <CLOSEB : ")">
| <COMMA : ",">
| <OPENSBR : "[">
| <CLOSESBR :"]">
| <EXPMARK : "!">
| <FSTOP : ".">
| <SEMI : ";">
| <EQUALS : "=">



| < INTEGER_LITERAL: (["0"-"9"])+ >
| < OP: "and"| "<"| "=="| "div"| "+"| "-"| "*">
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >


}

/*
 * TOKEN tester
 */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <RETURN>
      | t = <EXTENDS>
      | t = <ARRAYOF>
      | t = <BOOLEAN>
      | t = <INT>
      | t = <IF>
      | t = <THEN>
      | t = <ELSE>
      | t = <WHILE>
      | t = <DO>
      | t = <OUTPUT>
      | t = <LENGTH>
      | t = <TRUE>
      | t = <FALSE>
      | t = <SELF>
      | t = <NEW>
      | t = <OBJECT>
      | t = <ISNULL>
      | t = <OPENCBR>
      | t = <CLOSECBR>
      | t = <OPENB>
      | t = <CLOSEB>
      | t = <COMMA>
      | t = <OPENSBR>
      | t = <CLOSESBR>
      | t = <EXPMARK>
      | t = <FSTOP>
      | t = <SEMI>
      )

      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( 
      t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( 
      t = <OP>
      { System.out.println("Recognised as OP: " + t.image); }
    )
  | ( 
      t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
}


/************************************
 * The Moopl grammar starts here *
 ************************************/


public Program nt_Program() :
{
  ProcDecl a;
  ClassDecl b;
  List<ProcDecl> al;
  List<ClassDecl> bl;
}
{
  (a=nt_ProcDecl() { al.add(a); })+ (b=nt_ClassDecl() { bl.add(b); })*

  {return new Program(al,bl);}


  /*(nt_ProcDecl())*)+ (nt_ClassDecl())*)*/

}

public ClassDecl nt_ClassDecl() :
{
  String variable1; 
  String variable2;
  FieldDecl a;
  MethodDecl b;
  List<FieldDecl> al;
  List<MethodDecl> bl;

}
{ 
 
  <CLASS> (variable1 = <ID>)
  ((<OPENCBR> (a = nt_FieldDecl() { al.add(a); } )* (b = nt_MethodDecl(){ bl.add(b);})* <CLOSECBR> 
  {return new ClassDeclSimple(variable1,al,bl);})
  | 
  (<EXTENDS> (variable2 =<ID>) <OPENCBR> (a = nt_FieldDecl() {al.add(a);})* (b = nt_MethodDecl(){bl.add(b);})* <CLOSECBR>)
  {return new ClassDeclExtends(variable1,variable2,al,bl);}
  )

  /* example with lookahead
  LOOKAHEAD(2)
  <CLASS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  | 
  <CLASS> <ID><EXTENDS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  */
}

public void nt_FieldDecl() :
{
  Type a;
  String b;
}
{ 
   (a = nt_Type()) (b =<ID>) <SEMI>
   {return new FieldDecl(a,b);}
}


public void nt_MethodDecl() :
{}
{
    nt_ProcDecl() | nt_FunDecl()
}


public ProcDecl nt_ProcDecl() :
{
  String a;
  FormalList b;
  Statement c;
  List<Statement> cl;
}
{
  <PROC>(a=<ID>)<OPENB> (b=nt_FormalList()) <CLOSEB><OPENCBR> (c = nt_Statement() {cl.add(c);})* <CLOSECBR> 
  {return new ProcDecl(a,b,cl);} 
}


public void nt_FunDecl() :
{}
{
  <FUN> nt_Type() <ID> <OPENB> nt_FormalList() <CLOSEB> <OPENCBR> (nt_Statement())* <RETURN> nt_Exp() <SEMI> <CLOSECBR>
}

public List<Formal> nt_FormalList() :
{
  Type a;
  String name;
  Formal c,d;
  List<Formal> cl; 
}
{
  ((a = nt_Type()) (name =<ID>) {
  d = new Formal(a,name);
  cl.add(d);
  }
  (c = nt_FormalRest() { cl.add(c);})*
  {return cl;})?
}

public Formal nt_FormalRest() :
{
  String a;
  Type b;
}
{
  <COMMA> b =nt_Type() a=<ID>
  {return new Formal(b,a);}
}


public Type nt_Type() :
{
  Token t;
  Type xD;
  
}
{ 
  <ARRAYOF><OPENB>(xD=nt_Type() {return new TypeArray(xD);}) <CLOSEB>
  |t = <BOOLEAN> {return new TypeBoolean(); } 
  |t = <INT> { return new TypeInt();}
}

public Stm nt_Statement():
{
  Stm a;
  


}
{
  (a = nt_Block() {return new StmBlock(a);}) |
  (nt_Type() <ID> <SEMI>) |
  (<IF> <OPENB> nt_Exp() <CLOSEB> <THEN> nt_Block() <ELSE> nt_Block()) |
  (<WHILE> <OPENB> nt_Exp() <CLOSEB> <DO> nt_Block())|
  (<OUTPUT> nt_Exp() <SEMI>)|
  (nt_PrimaryExp()  
    (( <OPENSBR> nt_Exp() <CLOSESBR> <OP> nt_Exp() <SEMI> )|
    (<FSTOP> <ID> <OPENB> nt_ExpList() <CLOSEB> <COMMA>)|
    (<OP> nt_Exp() <SEMI>))
    )
}

public StmBlock nt_Block() :
{
  Stm a;
  List<Stm> al; 
}
{
  <OPENCBR> (a =nt_Statement() {al.add(a);})* <CLOSECBR>
  {return new StmBlock(al);}
}


public void nt_Exp() :
{}
{
(nt_PrimaryExp()
  (<OP> nt_PrimaryExp()|
  (<OPENSBR> nt_Exp() <CLOSESBR>)|
    (<FSTOP>
      (<LENGTH>|
      (<ID> <OPENB> nt_ExpList() <CLOSEB>)
      )
    )
  )
)

}


public Exp nt_PrimaryExp() :
{
  Token t; 
}
{
  (t = <INTEGER_LITERAL> {return new ExpInteger(Integer.parseInt(t.image));})|
  (t = <TRUE> {return new ExpTrue();} )|
  (t = <FALSE> {return new ExpFalse();})|
  (nt_Var())|
  (t = <SELF>{return new ExpSelf();})|
  (<NEW>
    ((<ARRAYOF><OPENB>nt_Type()<CLOSEB><OPENSBR>nt_Exp()<CLOSESBR>)|
    (<OBJECT><ID><OPENB>nt_ExpList()<CLOSEB>))
  )|
  (<EXPMARK> nt_PrimaryExp())|
  (<ISNULL> nt_PrimaryExp())|
  (<OPENB> nt_Exp() <CLOSEB>)

}

public Var nt_Var() :
{
  Token t;
}
 
{
  t = <ID> { return new Var(t.image);}
}

public void nt_ExpList() :
{}
{
  (nt_ExpRest() (nt_ExpRest())*| {}
}

public void nt_ExpRest() :
{}
{
  <COMMA> nt_Exp()
}

public void eof() :
{}
{
  <EOF>
}

options {
  STATIC = false;
}

PARSER_BEGIN(MooplParser)
  import syntaxtree.*;
  import syntaxtree.interp.*;
  import java.util.List;
  import java.util.LinkedList;
  public class MooplParser {
  }
PARSER_END(MooplParser)

SKIP : 
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
  | <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < PROC: "proc" >
| < FUN: "fun" >
| < CLASS: "class" >
| < EXTENDS : "extends">
| < RETURN: "return">
| < ARRAYOF: "arrayof">
| < BOOLEAN: "boolean">
| < INT: "int">
| < IF: "if">
| < THEN: "then">
| < ELSE: "else">
| < WHILE: "while">
| < DO: "do">
| < OUTPUT: "output">
| < LENGTH: "length">
| < TRUE: "true">
| < FALSE: "false">
| < SELF: "self">
| < NEW: "new">
| < OBJECT: "object">
| < ISNULL: "isnull"> 
| <OPENCBR : "{">
| <CLOSECBR : "}">
| <OPENB :"(">
| <CLOSEB : ")">
| <COMMA : ",">
| <OPENSBR : "[">
| <CLOSESBR :"]">
| <EXPMARK : "!">
| <FSTOP : ".">
| <SEMI : ";">



| < INTEGER_LITERAL: (["0"-"9"])+ >
| < OP: "and"| "<"| "=="| "div"| "+"| "-"| "*">
| < ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])* >


}

/*
 * TOKEN tester
 */
public void testTokens() :
{
  Token t;
}
{
  ( ( ( t = <PROC>
      | t = <FUN>
      | t = <CLASS>
      | t = <RETURN>
      | t = <EXTENDS>
      | t = <ARRAYOF>
      | t = <BOOLEAN>
      | t = <INT>
      | t = <IF>
      | t = <THEN>
      | t = <ELSE>
      | t = <WHILE>
      | t = <DO>
      | t = <OUTPUT>
      | t = <LENGTH>
      | t = <TRUE>
      | t = <FALSE>
      | t = <SELF>
      | t = <NEW>
      | t = <OBJECT>
      | t = <ISNULL>
      | t = <OPENCBR>
      | t = <CLOSECBR>
      | t = <OPENB>
      | t = <CLOSEB>
      | t = <COMMA>
      | t = <OPENSBR>
      | t = <CLOSESBR>
      | t = <EXPMARK>
      | t = <FSTOP>
      | t = <SEMI>
      )

      { System.out.println("Recognised as valid token: " + t.image); }
    )
  | ( 
      t = <INTEGER_LITERAL>
      { System.out.println("Recognised as INTEGER_LITERAL: " + t.image); }
    )
  | ( 
      t = <OP>
      { System.out.println("Recognised as OP: " + t.image); }
    )
  | ( 
      t = <ID>
      { System.out.println("Recognised as ID: " + t.image); }
    )
  )*
}


/************************************
 * The Moopl grammar starts here *
 ************************************/


public void nt_Program() :
{}
{
  (nt_ProcDecl())+ (nt_ClassDecl())*
}

public void nt_ClassDecl() :
{}
{ 
 
  <CLASS> <ID>
  ((<OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>)
  | 
  (<EXTENDS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>))

  /* example with lookahead
  LOOKAHEAD(2)
  <CLASS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  | 
  <CLASS> <ID><EXTENDS> <ID> <OPENCBR> (nt_FieldDecl())* (nt_MethodDecl())* <CLOSECBR>
  */
}

public void nt_FieldDecl() :
{}
{ 
   (nt_Type()) <ID> <SEMI>
}


public void nt_MethodDecl() :
{}
{
    nt_ProcDecl() | nt_FunDecl()
}


public void nt_ProcDecl() :
{}
{
  <PROC><ID><OPENB> nt_FormalList() <CLOSEB><OPENCBR> (nt_Statement())* <CLOSECBR>  // TODO: ADD MISSING CASES
}


public void nt_FunDecl() :
{}
{
  <FUN> // TODO: ADD MISSING CASES
}

public void nt_FormalList() :
{}
{

}

public void nt_FormalRest() :
{}
{

}


public void nt_Type() :
{}
{ 
  <ARRAYOF><OPENB>(nt_Type())<CLOSEB>
  |<BOOLEAN> 
  |<INT>
}

public void nt_Statement():
{}
{

}

public void nt_Block() :
{}
{

}
public void nt_Exp() :
{}
{

}


public void nt_PrimaryExp() :
{}
{
  <INTEGER_LITERAL>
}

public void nt_Var() :
{}
{

}

public void nt_ExpList() :
{}
{

}

public void nt_ExpRest() :
{}
{

}

public void eof() :
{}
{
  <EOF>
}
